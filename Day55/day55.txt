TRIGGER(트리거)
 - 데이터베이스에서 테이블이나 뷰에 INSERT, UPDATE, DELETE 등의 (DML)
       이벤트 발생시 자동으로 실행되도록 사용자가 정의해놓은 프로시저

 - 특정 테이블이 변경되면 다른 테이블이 자동으로 변경되도록 하기 위해서 사용

 - 트리거의 단점
       1) 트리거를 생성하고 관리하려면 반드시 문서화가 필요하고,
              인수인계시 트리거의 유무를 알려줘야 하는데
              유지 보수에서 운영 포인트가 하나 늘어나는 것
       2) 되도록이면 트리거에는 비즈니스 로직은 넣지 않는다.
              만약 트리거 안에서 UTL_HTTP를 써서 API URL을 호출하도록 작성하였을 경우
              테이블에 이벤트가 발생해서 트리거가 작동을 한 뒤
              롤백을 해도 트리거는 롤백이 가능하지만 호출된 API는 롤백을 할 수 없다.

 - DB에서 테이블을 찾아서 우클릭 → 트리거 → 생성
 - 구조
       CREATE TRIGGER 트리거명
       timing[BEFORE | AFTER] event[INSERT | UPDATE | DELETE] ON 테이블명;
       [FOR EACH ROW]
       [WHEN conditions]
       BEGIN
           statement
       END;
       /

 - 트리거 작성시 주요 내용
       timing
           BEFORE
               어떤 테이블에 DML문이 실행될 때 해당 문장이 실행되기 전에
               트리거가 가지고 있는 BEGIN ~ END 사이의 문장을 실행
           AFTER
               DML문이 실행될 때 해당 문장이 실행되고 난 후에
               트리거가 가지고 있는 BEGIN ~ END 사이의 문장을 실행
       event
           사용자가 어떤 DML문을 실행했을 때 트리거를 발생시킬 것인지 결정
               여러 개를 사용할 경우 OR로 구분
                   ex) INSERT OR DELETE OR UPDATE
       BEGIN ~ END
           해당 타이밍에 해당 이벤트가 발생하게 되면 실행될 기본 로직이 포함되는 부분
           BEGIN ~ END 사이에 기술
       FOR EACH ROW
           FOR EACH ROW에 의해 문장 레벨 트리거와 행 레벨 트리거로 나뉨
           FOR EACH ROW가 생략되면 문장 레벨 트리거
                                   생략되지 않으면 행 레벨 트리거
           문장 레벨 트리거는 어떤 사용자가 트리거가 설정되어 있는 테이블에 대해
               DML문을 실행할 때 【단 한 번만】 트리거를 발생시킬 때 사용
           행 레벨 트리거는 DML문을 실행할 때 【행마다】 트리거를 발생시킬 때 사용
       WHEN conditons
           행 레벨 트리거에서만 설정할 수 있음
           이벤트에 정의된 테이블에 이벤트가 발생할 때보다 
               구체적인 데이터 검색 조건을 부여할 때 사용
