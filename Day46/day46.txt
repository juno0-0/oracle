컬럼 레벨 방식의 제약조건
 - 컬럼명1 타입 제약조건1
    컬럼명2 타입 제약조건2

테이블 레벨 방식의 제약조건
 - 컬럼명1 타입
   컬럼명2 타입
   제약조건1
   제약조건2
   NOT NULL은 컬럼 레벨 방식의 제약조건만 가능

 - 복합키 : 2개 이상의 컬럼이 하나의 기본 키를 구성하는 경우
 	     반드시 테이블 레벨 방식의 제약조건을 사용

제약조건 변경하기
 - 이미 존재하는 테이블에 제약조건을 추가, 삭제, 변경할 땐 ALTER TABLE문을 사용
 - 추가
     ALTER TABLE 테이블명 ADD CONSTRAINT 인덱스PK PRIMARY KEY(칼럼명);
 - 제거
     ALTER TABLE 테이블명 DROP PRIMARY KEY;(기본키만 가능)
     ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건이름;
 - NOT NULL은 MODIFY로 추가
     ALTER TABLE 테이블명 MODIFY 칼럼명 CONSTRAINT 인덱스NN NOT NULL;
      (제거는 동일)
 
제약조건 비활성화
 - 외래키가 참조하고 있는 기본키는 삭제할 수 없다.
 - ALTER TABLE 자식테이블명 DISABLE CONSTRAINT 제약조건명;
       제약조건을 비활성화하면 외래키가 참조하고 있는 기본키도 삭제할 수 있다.

제약조건 활성화
 - ALTER TABLE 자식테이블명 ENABLE CONSTRAINT 제약조건명;
   
비활성화/활성화 순서
 - 기본키의 값 중에 하나를 지우고 싶을 때
        (외래키가 참조하고 있어서 지울 수 없다.)
    참조하고 있는 외래키를 비활성화
    기본키 지우기
 - 다시 활성화하고 싶을 때
    외래키가 참조하는 기본키 값이 없으면 활성화를 할 수 없음
    다시 외래키가 참조하는 기본키 값을 넣어주기
    외래키 다시 활성화

CASCADE
 - 부모테이블과 자식테이블 간의 참조 무결성이 설정되어 있을 때
       부모테이블의 제약조건을 비활성화하면
       이를 참조하는 자식 테이블의 제약조건이 함께 비활성화되는 옵션
       alter table 부모테이블 disable primary key cascade;
       연결되있는 자식테이블도 비활성화

SET NULL
deptno number(2) REFERENCES 부모테이블(칼럼명) on delete set null;

JOIN
 - 관계형 데이터베이스에서 테이블 간의 관계가 중요하기 때문에
       하나 이상의 테이블이 결합하여 사용된다.
       한개 이상의 테이블에서 데이터를 조회하기 위해 사용되는 것
       (한 테이블에서 다른 테이블의 데이터 조회)
 - 종류
      EQUI JOIN : 동일 칼럼을 기준으로 조인(조건이 =)
      NON-EQUI JOIN : 동일 칼럼이 없이 다른 조건을 사용하여 조인(조건이 >, <)
      OUTER JOIN : 조인 조건에 만족하지 않는 행도 나타낸다.
      SELF JOIN : 한 테이블 내에서 조인
 - CROSS JOIN : 특별한 키워드 없이 SELECT문의 FROM 절에 
                        테이블들을 콤마로 연결해서 연속으로 기술하는 것(모든 집합)
		SELECT * FROM 부모테이블, 자식테이블;
		레코드 수 = 테이블1 레코드 수 x 테이블2 레코드 수
		     테이블2 첫번째 레코드에 테이블1의 모든 레코드
			    두번째 레코드에 테이블1의 모든 레코드 ...
	            알고싶은 칼럼명만 명시할 경우 두 테이블에 같은 칼럼이 있을 때
		오류가 발생한다.
		그럴 때는 알고 싶은 테이블의 칼럼이란걸 명시해준다.
		select empno, emp.deptno, dname from dept, emp; 또는
		select * from emp cross join dept;

 - EQUI JOIN : 가장 많이 사용하는 조인문
		조인 조건이 정확히 일치하는 경우에 사용
		(PK와 FK를 사용한 조인)
		보통 조인 조건에 '='를 이용하는 조인을 말함.
	            주의사항
		     1) 각각 테이블에 대한 AS를 반드시 명시
		     2) 양쪽 테이블에 모두 데이터가 존재해야 함
			한쪽은 1,2,3이고 한쪽은 1,2,3,4면 4가 누락된다.
	           select * from emp, dept where emp.deptno = dept.deptno;
	           emp의 deptno랑 dept의 deptno가 같을 경우만 JOIN
	           수행순서
		   from emp, dept --> where emp.deptno = dept.deptno --> *
		   cross join으로 모든 자료를 가져와서 
		   --> where절의 조건에 만족하는 것만 출력 --> 모든 컬럼 출력
	           예시
		   select ename, dname from emp, dept 
		         where emp.deptno = dept.deptno and ename = '이문세'
테이블명에 별칭 붙이기
 - select ename, dname from emp 뀨, dept 꾸 where 뀨.deptno = 꾸.deptno;
   from에 테이블명을 적고 별칭을 적어주면 그때부턴 별칭으로 사용한다.
   (원래 테이블명을 사용하면 오류 발생)

 - NON-EQUI JOIN : '=' 연산자가 아닌 다른 조건으로 조인을 수행하는 방법
		  between A and B, 부등호, in null, is not null, in 등
		  select ename, sal, grade from emp, salgrade 
			where sal between losal and hisal; 

 - SELF JOIN : JOIN 대상이 나와 또 다른 나
	          자기 자신과 조인하기 때문에 컬럼명이 같아서
	          반드시 별칭을 명시해줘야 함
		select e1.ename star, e2.ename manager from emp e1, emp e2 
			where e1.mgr = e2.empno;

 - ANSI JOIN : db 종류에 상관없이 먹히는 조인

 - OUTER JOIN : 2개의 테이블에서 LEFT면 왼쪽을 기준, RIGHT면 나중에 나온거, 
		FULL이면 2개 다 집어넣어서 조인
		INNER JOIN과 반대되는 개념
		데이터가 양쪽에 없다 해도 보여줄 수 있는 JOIN
		연산자 "(+)"는 양쪽에 오지 못한다.
		조인시 값이 없는 조인측에 "(+)"를 위치 

 - INNER JOIN : SELECT 컬럼명 FROM 테이블명1 INNER JOIN 테이블명2 ON 
		테이블명1.칼럼명 = 테이블명2.칼럼명;
		equi join과 같은 결과가 나온다.
		select ename, dname from emp, dept where emp.deptno = dept.deptno;
		select * from emp inner join dept on emp.deptno = dept.deptno; 같은 결과
		  
left, right, full : 테이블의 레코드(행)들이 다 들어가냐 안들어가냐 겹치는 것만 들어가냐

CROSS JOIN과 FULL JOIN의 차이점
 - CROSS JOIN은 모든 경우의 수
		  
order by는 항상 마지막에 적는다.

제약조건이름도 중복이 안되니 확인하기
ERD 표에서 윗칸은 기본키