사용자 롤 정의
 - 사용자 롤 생성
       CREATE ROLE 롤이름;
 - 롤에 권한 부여
       GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW TO 사용자명
 - 사용자에게 롤 부여
       GRANT 롤이름 TO 사용자명;

 - 사용자에게 ROLE 회수하기
       REVOKE 롤이름 FROM 사용자명;
       롤을 부여했던 사용자에서 회수

 - ROLE 제거하기
       DROP ROLE 롤이름;
       롤을 만든 사용자에서 제거
       
 - ROLE의 장점
       여러 사용자들에게 동일한 역할을 부여하기 편리함.

 ※ ROLE : 여러가지 권한을 묶어놓은 곳

동의어(SYNONYM)
 - 다른 데이터베이스 객체에 대한 별명
 - 데이터베이스에서는 여러 사용자들이 테이블을 서로 공유하는데,
       다른 사용자의 테이블을 접근할 때 사용자명.테이블명으로 표현
       이를 동의어를 적용하여 간단하게 요약해서 기술할 수 있다.
 - 다른 계정에 있는 테이블을 가져다 쓰는 경우 보안상에 문제가 될 수 있어서 사용
 - 동의어는 지속적인 관리가 필요함
       동의어의 존재 유무를 모르는 사람이 동일한 이름의 테이블을 만드는 경우 오류 발생
       테이블을 생성한 사용자가 테이블을 지운경우 
           동의어를 통해 테이블을 이용하던 사용자들의 입장에서는 오류 발생

 - 동의어 생성하기
       CREATE [PUBLIC] SYNONYM 동의어명 FOR 사용자명.테이블명;
           PUBLIC을 붙이면 모든 사용자가 사용할 수 있는 공개 동의어가 된다.
           PUBLIC을 붙이지 않으면 PRIVATE 상태
               SYNONYM을 사용할 계정에서 생성
               보통 이름은 편의성을 위해서 테이블명과 동일하게 한다.★
      
 - 동의어 삭제하기
       DROP SYNONYM 동의어명;
       만약 공개 동의어일 경우 PUBLIC를 붙여준다.
           DROP PUBLIC SYNONYM 동의어명;

 - 현재 계정의 SYNONYM 조회
       SELECT * FROM user_synonyms

 - 전체 SYNONYM 조회
       SELECT * FROM all_synonyms
       
PL/SQL의 구조
 - Oracle's Procedural Language extension to SQL의 약자
 - SQL문장에서 변수 정의, 조건 처리(IF), 반복 처리(LOOP, WHILE, FOR) 등을 지원
       오라클 자체에 내장되어 있는 절차적 언어로서 SQL의 단점을 보완한다.
 - DECLARE(선언부, 옵션)
       PL/SQL에서 사용하는 모든 변수나 상수를 선언하는 부분
           DECLARE로 시작

 - BEGIN(실행부, 필수)
       절차적 형식으로 SQL 문을 실행할 수 있도록 절차적 언어의 요소인 
           제어문, 반복문, 함수 정의 등 로직을 기술할 수 있는 부분
           BEGIN으로 시작

 - EXCEPTION(예외처리부, 옵션)
       PL/SQL문이 실행되는 중에 에러가 발생할 수 있는데 이를 예외사항이라 함
           이러한 예외상황이 발생했을 때 이를 해결하기 위한 문장을 기술할 수 있는 부분
           EXCEPTION으로 시작

 - 작성 요령
       1) 블록 내에서 한 문장이 종료할 때마다 ';'을 사용
       2) END 뒤에 ';'을 사용하여 하나의 블록이 끝났다는 것을 명시
       3) 블록의 작성은 편집기를 통해 파일로 작성할 수 있고,
              프롬프트에서 바로 작성할 수도 있음
       4) SQL*PLUS 환경에서는 DECLARE나 BEGIN이라는 키워드로
              PL/SQL 블록이 시작하는 것을 알 수 있음
       5) 단일 행 주석은 --, 여러 행 주속은 /**/
       6) 쿼리문을 수행하기 위해서 /가 반드시 입력되어야 하며,
              PL/SQL 블록은 행에 /가 있으면 종결된 것으로 간주함

       ex) DECLARE -- 선언부
               vempno number(4); -- 스칼라 변수
               vename varchar2(10); -- 여기서 바로 초기값을 넣어도 된다
            BEGIN -- 실행부
                vempno := 1001; -- 값 넣기
                vename := '이지은';
                DBMS_OUTPUT.PUT_LINE(vempno||'     '||vename); -- syso와 비슷함, ||는 문자열과 문자열을 연결
                END; -- 끝
                / -- 실행
                
변수선언과 대입문
 - PL/SQL의 선언부(DECLARE)에서는 실행부(BEGIN)에서 사용할 변수를 선언
 - 형식
       변수명 [CONSTANT] 자료형 [NOT NULL] [:= | DEFAULT Expression];
           CONSTRANT 
               변수의 값을 변경할 수 없도록 제약
           Expression
               Literal, 다른 변수, 연산자나 함수를 포함하는 표현식

 - PL/SQL에서 변수를 사용하는 이유
       변수는 데이터의 임시 저장 영역
       저장된 값을 조작하기 위해 사용
       저장된 값을 반복해서 재사용

 - PL/SQL에서 사용될 변수의 규칙
       반드시 문자로 시작해야 함
       문자나 숫자, 특수문자를 포함할 수 있음
       변수명은 30byte 이하여야 함
       예약어를 포함하면 안됨

 - 대입문으로 변수에 값 지정하기
       변수명 := 값;
           값을 대입할 때는 :=을 사용
       SELECT 열이름 INTO 변수명 FROM 테이블;
           테이블에 있는 열이름의 값을 변수명에 저장

 - 변수는 PL/SQL 프로시저인 BEGIN ~ END 사이에서만 실행하는 순간에만 유지되며,
       프로시저 실행이 종료되면 소멸

 - SET SERVEROUTPUT ON;
       DBMS_OUTPUT이 화면에 출력되기 위해 해준다.

주요 변수들의 종류
 - PL/SQL 변수
       단순 변수
           Scalar 변수
           Reference 변수
               %TYPE 변수
               %ROWTYPE 변수
       LOB
       복합 변수
           RECORD TYPE
           TABLE TYPE

 - 비 PL/SQL 변수
       BIND 변수
           
단순 변수
 - Scalar 변수
       단일 값을 가지는 변수의 데이터 타입을 직접 지정해주는 변수
           데이터 형은 SQL에서 사용하던 자료 타입과 거의 유사함
       문법
           변수명 [CONSTANT] 데이터타입 [NOT NULL] [:= | DEFAULT Expression];
               CONSTANT
                   읽기전용 변수, 상수로 선언하기 위한 키워드로 초기값이 반드시 지정되야 함
               NOT NULL
	       항상 값을 가지도록 제약을 주는 키워드
                   초기값이 반드시 지정되야 함
               := 또는 DEFAULT
                   변수에 기본값(초기값)을 할당하기 위한 키워드
               Expression
	       변수에 부여할 기본값(초기값)
                   다른 변수나 수식, 함수가 올 수 있음
       예시
           v_num NUMBER(5,3);
               v_num에 숫자를 저장하는 변수로 총 5자리 중 3자리는 소수점(0.000)
           v_name VARCHAR2(12) := '이지은';
               v_name의 타입은 VARCHAR2이고 초기값으로 '이지은'을 줌
       
 - Reference 변수
       데이터 형을 다른 칼럼에서 참조 후 지정하는 방식        
           변수가 지정되어야 할 정확한 데이터 형태를 모를 경우 
               해당 데이터가 들어 있는 칼럼의 정보를 참조
       %TYPE 변수
           이미 선언된 다른 변수나 칼럼의 데이터 타입을 이용하여 선언
           테이블의 칼럼 데이터 타입을 모를 경우 사용
           코딩이후 참조한 칼럼의 데이터 타입이 변경되어도 수정할 필요가 없음
           예시
               v_num 테이블A.칼럼B%TYPE
                   테이블A의 칼럼B와 동일한 데이터형으로 변수 선언
                       v_num의 데이터형과 크기는 칼럼B와 같다.

       %ROWTYPE 변수
           하나 이상의 데이터 값을 갖는 데이터 타입
               배열과 비슷한 역할을 하고 재사용이 가능
           테이블이나 뷰 내부의 칼럼 데이터형, 크기, 속성등을 그대로 사용
           지정된 테이블의 구조와 동일한 구조를 갖는 변수를 선언하는 것
           테이블의 칼럼 수나 타입을 알지 못할 경우 사용
           테이블의 칼럼이 변경되어도 수정할 필요가 없음
           예시
           v_row 테이블A%ROWTYPE
               테이블A의 여러 칼럼을 한꺼번에 저장할 변수로 선언
                   ROWTYPE 변수는 하나의 테이블에 여러 칼럼의 값을 한꺼번에 저장할 수 있는 변수를 의미
                       테이블A와 동일한 구조를 갖는 v_row가 생성

 - 참고 : https://goalker.tistory.com/84
           https://psh85a.tistory.com/entry/oracle-TYPE%EA%B3%BC-ROWTYPE
               



