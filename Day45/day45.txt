INSERT : 행 추가
	INSERT INTO 테이블명[(컬럼명1, 컬럼명2, ... )] values(값1, 값2, ...);
	NULL값 넣기 : 값으로 null을 주거나, 값으로 ''만 넣는다.
	날짜 입력은 직접 쓰거나 TO_DATE를 사용

UPDATE : 행 수정
	 UPDATE 테이블명 SET 수정될컬럼명 = 수정될값 WHERE 컬럼명 = 값
	 UPDATE는 WHERE절과 같이 사용
	     (WHERE를 사용하지 않으면 모든 행이 수정된다.)
	 연산도 가능하다
	     UPDATE 테이블명 SET 컬럼명 = 컬럼명 + 100;

DELETE : 행 삭제
	DELETE [FROM] 테이블명 WHERE 컬럼명 = 값;
	UPDATE와 마찬가지로 WHERE절과 같이 사용
	WHERE절의 조건이 2개인 경우
	    DELETE 테이블명 WHERE 컬럼명 = 값 and 컬럼명 = 값;
	WHERE절의 조건에서 값이 null인 경우를 찾을 때 in null 사용
	    DELETE 테이블명 WHERE 컬럼명 is null;

오라클은 트랜잭션을 기반으로 데이터의 일관성을 보장한다.
트랜잭션이란?
 - 데이터 처리에서 논리적으로 하나의 작업 단위를 의미
 - db시점에서는 커밋 롤백의 개념
 - jdbc에서는 자바에서 sql문을 하나하나 보낼 때마다 자동커밋이 되기 때문에
       자동커밋을 끄고 작업을 해서 마지막까지 정상 처리가 되면 수동 커밋을 한다.
       중간에 문제가 생기면 롤백으로 작업 이전으로 돌아감.

COMMIT : 모든 작업들을 정상적으로 처리하겠다고 확정하는 명령어

ROLLBACK : 마지막 커밋 지점으로 돌아감

데이터 무결성 제약조건
 - 테이블에 부적절한 자료가 입력되는 것을 방지하는 것
       테이블 생성시 각 컬럼에 대해 정의하는 여러가지 규칙
 1) NOT NULL : NULL을 허용하지 않음.
 2) UNIQUE : 중복을 허용하지 않음(유일한 값)
 3) PRIMARY KEY : NOT NULL + UNIQUE
 4) FOREIGN KEY : 참조되는 테이블의 컬럼에 같은 값이 존재하면 허용
		    기본키에 있는 데이터만 외래키가 있는 테이블에 입력 가능
		    외래키를 지정한 테이블에 값을 넣으려고 시도하면
		        기본키에 그 값이 있는지 확인하고 있으면 허용 없으면 에러
 5) CHECK : 저장 가능한 데이터 값의 범위나 조건을 지정하여 설정한 값만 허용

제약조건 확인하기
 - USER_CONSTRAINTS 데이터 딕셔너리로 내가 만든 제약조건의 정보를 조회
    · OWNER : 제약조건을 소유한 사용자명
    · CONSTRAINT_NAME : 제약조건 명
    · CONSTRAINT_TYPE : 제약조건 타입
	1) P : PRIMARY KEY
	2) R : FOREIGN KEY
	3) U : UNIQUE
	4) C : CHECK, NOT NULL
    · TABLE_NAME : 제약조건이 속한 테이블명
    · SEARCH_CONDITION : CHECK 조건일 경우 어떤 내용이 조건으로 사용되었는지?
    · R_CONSTRAINT_NAME : FOREIGN KEY인 경우 어떤 PRAMARY KEY를 참조했는지?
	ex) SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE
		FROM USER_CONSTRAINTS;
	     SELECT * FROM USER_CONSTRAINTS;

컬럼 레벨 제약조건 설정하기
 - 컬럼 레벨로 제약조건 이름을 명시해서 제약조건 설정
       이 때 생긴 이름은 인덱스라고 부르며 검색할 때 검색키로 사용해서 검색 속도를 향상
 - 컬럼을 생성할 때 제약조건을 지정
       테이블 생성시 마지막에 쓰는건 테이블 레벨 제약조건
 - 따로 제약조건의 이름을 명시하지 않으면 오라클에서 자동으로 만들어준다.
 - 제약조건 이름 양식 
       테이블명_컬럼명_타입

PRIMARY KEY : NOT NULL 제약조건과 UNIQUE 제약조건을 모두 갖고 있는 제약조건
		즉, 데이터들끼리의 유일성을 보장하는 칼럼에 설정
		테이블당 한개만 설정이 가능하다.
		단, 칼럼 두 개 이상을 하나로 묶어서 하나처럼 설정은 가능 = 복합키
		    이 경우 중복을 막을 때 두 컬럼이 모두 같은게 있으면 막는다.

FOREIGN KEY : 기본키에 존재하는 데이터만 외래키가 있는 테이블에 입력할 수 있다.
		부모테이블은 자식의 데이터나 테이블이 삭제된다고 영향을 받지 않는다.
		참조하는 데이터 칼럼과 데이터 타입이 "반드시" 일치해야 한다.
		참조할수 있는 컬럼은 기본키 or UNIQUE만 가능하다.

COMPOSITE KEY : 여러 열을 조합하여 기본키 역할을 할 수 있게 만든 키(복합키)
	               하나의 열만으로 행을 식별하는 것이 불가능하여 여러 열 값을
		   함께 사용해야 각 행이 유일한 데이터로서 가치를 지닌다.
		   이 경우 외래키로 참조할 때 복합키에 조합된 열 중 하나를 UNIQUE로 만들어서 참조?

CHECK : 입력되는 값을 체크하여 설정된 값 이외의 값이 들어오면 
	  오류 메시지와 함께 명령이 수행되지 못하게 하는 것.
	  조건으로 데이터의 값의 범위나 특정 패턴의 숫자나 문자 값을 설정할 수 있다.
	  ex) 컬럼명 number CONSTRAINT 테이블명_컬럼명_이름 CHECK(컬럼명 BETWEEN 500 AND 5000)
	       컬럼명 varcher2 CONSTRAINT 테이블명_컬럼명_이름 CHECK(컬럼명 IN('M','m','F','f')

DEFAULT : 아무런 값을 입력하지 않았을 때 디폴트로 값이 입력된다.
	      NULL도 값이라서 NULL을 넣으면 디폴트 값이 아닌 NULL이 들어간다.

테이블 레벨 방식의 제약조건
 - 컬럼을 모두 정의하고 나서 테이블 정의를 마무리 짓기 전에
       따로 생성된 컬럼들에 대한 제약조건을 한꺼번에 지정하는 것
       [CONSTRAINT 테이블명_컬럼명_제약조건타입] 제약조건
	                  생략 가능

 - 복합키로 기본키를 지정할 경우
       2개 이상의 컬럼이 하나의 기본키를 구성하는 경우
       복합키 형태로 제약 조건을 지정할 경우 컬럼 레벨 형식으로는 불가능
       반드시 테이블 레벨 방식을 사용
       CONSTRAINT 인덱스 PRIMARY KEY(컬럼명1, 컬럼명2, ... )
 
 - ALTER TABLE로 제약조건을 추가할 때
       테이블의 정의가 완료되어서 이미 테이블의 구조가 결정된 후에
       나중에 테이블에 제약 조건을 추가하고자 할 때 테이블 레벨 방식을 사용
       (왠만하면 테이블을 정의할 때 제약조건을 정의하자.)

PRIMARY KEY로 만든 column명 조회하기
 - SELECT constraint_name, table_name, column_name FROM USER_CONS_COLUMNS;


